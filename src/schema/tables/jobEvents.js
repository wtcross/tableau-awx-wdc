export default {
  alias: 'jobEvents',
  id: 'jobEvents',
  incrementColumnId: 'id',
  description: 'A job is an instance of an Ansible playbook run, inventory sync, or project sync.',
  columns: [
    {
      id: 'id',
      alias: 'id',
      dataType: 'int',
      columnRole: 'dimension',
      description: 'Database ID for this job event. (integer)',
    },
    {
      id: 'type',
      alias: 'type',
      dataType: 'string',
      columnRole: 'dimension',
      description: 'Data type for this job event. (choice)',
    },
    {
      id: 'url',
      alias: 'url',
      dataType: 'string',
      description: 'URL for this job event. (string)',
    },
    {
      id: 'created',
      alias: 'created',
      dataType: 'datetime',
      description: 'Timestamp when this job event was created. (datetime)',
    },
    {
      id: 'modified',
      alias: 'modified',
      dataType: 'datetime',
      description: 'Timestamp when this job event was last modified. (datetime)',
    },
    {
      id: 'job',
      alias: 'job',
      dataType: 'int',
      columnRole: 'dimension',
      description: 'ID of the job that created this event. (field)',
    },
    {
      id: 'event',
      alias: 'event',
      dataType: 'string',
      columnRole: 'dimension',
      description: 'runner_on_failed / runner_on_ok / runner_on_error / runner_on_skipped / runner_on_unreachable / runner_on_no_hosts / runner_on_async_poll / runner_on_async_ok / runner_on_async_failed / runner_item_on_ok / runner_item_on_failed / runner_item_on_skipped / runner_retry / runner_on_file_diff / playbook_on_start / playbook_on_notify / playbook_on_include / playbook_on_no_hosts_matched / playbook_on_no_hosts_remaining / playbook_on_task_start / playbook_on_vars_prompt / playbook_on_setup / playbook_on_import_for_host / playbook_on_not_import_for_host / playbook_on_play_start / playbook_on_stats / debug / verbose / deprecated / warning / system_warning / error',
    },
    {
      id: 'counter',
      alias: 'counter',
      dataType: 'int',
      columnRole: 'measure',
      description: '(integer)',
    },
    {
      id: 'event_display',
      alias: 'event_display',
      dataType: 'string',
      description: '(string)',
    },
    // event_data
    {
      id: 'event_level',
      alias: 'event_level',
      dataType: 'int',
      columnRole: 'dimension',
      description: '(integer)',
    },
    {
      id: 'failed',
      alias: 'failed',
      dataType: 'bool',
      columnRole: 'dimension',
      description: '(boolean)',
    },
    {
      id: 'changed',
      alias: 'changed',
      dataType: 'bool',
      columnRole: 'dimension',
      description: '(boolean)',
    },
    {
      id: 'uuid',
      alias: 'uuid',
      dataType: 'string',
      columnRole: 'dimension',
      description: '(string)',
    },
    {
      id: 'parent_uuid',
      alias: 'parent_uuid',
      dataType: 'string',
      columnRole: 'dimension',
      description: '(string)',
    },
    {
      id: 'host',
      alias: 'host',
      dataType: 'string',
      columnRole: 'dimension',
      description: '(field)',
    },
    {
      id: 'host_name',
      alias: 'host_name',
      dataType: 'string',
      columnRole: 'dimension',
      description: '(string)',
    },
    {
      id: 'parent',
      alias: 'parent',
      dataType: 'string',
      columnRole: 'dimension',
      description: '(field)',
    },
    {
      id: 'playbook',
      alias: 'playbook',
      dataType: 'string',
      columnRole: 'dimension',
      description: 'Path to the playbook relative to the project root. (string)',
    },
    {
      id: 'play',
      alias: 'play',
      dataType: 'string',
      columnRole: 'dimension',
      description: '(string)',
    },
    {
      id: 'task',
      alias: 'task',
      dataType: 'string',
      columnRole: 'dimension',
      description: '(string)',
    },
    {
      id: 'role',
      alias: 'role',
      dataType: 'string',
      columnRole: 'dimension',
      description: '(string)',
    },
    {
      id: 'stdout',
      alias: 'stdout',
      dataType: 'string',
      description: '(string)',
    },
    {
      id: 'start_line',
      alias: 'start_line',
      dataType: 'int',
      description: '(integer)',
    },
    {
      id: 'end_line',
      alias: 'end_line',
      dataType: 'int',
      description: '(integer)',
    },

    {
      id: 'instance_group',
      alias: 'instance_group',
      dataType: 'int',
      columnRole: 'dimension',
      description: 'The Rampart/Instance group the job was run under (field)',
    },
    {
      id: 'inventory',
      alias: 'inventory',
      dataType: 'int',
      columnRole: 'dimension',
      description: '(field)',
    },
    {
      id: 'job_explanation',
      alias: 'job_explanation',
      dataType: 'string',
      description: 'A status field to indicate the state of the job if it was not able to run and capture stdout (string)',
    },
    {
      id: 'job_tags',
      alias: 'job_tags',
      dataType: 'string',
      description: '(string)',
    },
    {
      id: 'job_template',
      alias: 'job_template',
      dataType: 'int',
      columnRole: 'dimension',
      description: '(field)',
    },
    {
      id: 'job_type',
      alias: 'job_type',
      dataType: 'string',
      columnRole: 'dimension',
      description: 'run / check',
    },
    {
      id: 'launch_type',
      alias: 'launch_type',
      dataType: 'string',
      columnRole: 'dimension',
      description: 'manual / relaunch / callback / scheduled / dependency / workflow / sync / scm',
    },
    {
      id: 'limit',
      alias: 'limit',
      dataType: 'string',
      description: '(string)',
    },
    {
      id: 'name',
      alias: 'name',
      dataType: 'string',
      columnRole: 'dimension',
      description: 'Name of this job. (string)',
    },
    {
      id: 'playbook',
      alias: 'playbook',
      dataType: 'string',
      description: 'Path to the playbook relative to the project root. (string)',
    },
    {
      id: 'project',
      alias: 'project',
      dataType: 'int',
      columnRole: 'dimension',
      description: '(field)',
    },
    {
      id: 'scm_revision',
      alias: 'scm_revision',
      dataType: 'string',
      columnRole: 'dimension',
      description: 'The SCM Revision from the Project used for this job, if available (string)',
    },
    {
      id: 'skip_tags',
      alias: 'skip_tags',
      dataType: 'string',
      description: '(string)',
    },
    {
      id: 'start_at_task',
      alias: 'start_at_task',
      dataType: 'string',
      description: '(string)',
    },
    {
      id: 'started',
      alias: 'started',
      dataType: 'datetime',
      description: 'The date and time the job was queued for starting. (datetime)',
    },
    {
      id: 'status',
      alias: 'status',
      dataType: 'string',
      description: 'new / pending / waiting / running / successful / failed / error / canceled',
    },
    {
      id: 'timeout',
      alias: 'timeout',
      dataType: 'int',
      columnRole: 'measure',
      description: 'The amount of time (in seconds) to run before the task is canceled. (integer)',
    },
    {
      id: 'unified_job_template',
      alias: 'unified_job_template',
      dataType: 'int',
      description: '',
    },
    {
      id: 'use_fact_cache',
      alias: 'use_fact_cache',
      dataType: 'bool',
      columnRole: 'dimension',
      description: 'If enabled, Tower will act as an Ansible Fact Cache Plugin; persisting facts at the end of a playbook run to the database and caching facts for use by Ansible. (boolean)',
    },
    {
      id: 'verbosity',
      alias: 'verbosity',
      dataType: 'int',
      columnRole: 'dimension',
      description: '0 (Normal) / 1 (Verbose) / 2 (More Verbose) / 3 (Debug) / 4 (Connection Debug) / 5 (WinRM Debug)',
    },
    {
      id: 'verbosity',
      alias: 'verbosity',
      dataType: 'int',
      columnRole: 'dimension',
      description: '(integer)',
    },
  ],
};
